"use strict";

moment.locale('vi');

var parseJwt = function (token) {
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
    return JSON.parse(jsonPayload);
}

var validateSelect2Multi = function (id, classParent) {
    $('#' + id).parents('.' + classParent).find('span').find('.select2-selection').removeClass('input-invalid');
    if ($('#' + id).val().length === 0) {
        $('#' + id).parents('.' + classParent).find('span').find('.select2-selection').addClass('input-invalid');
        return false;
    }
    return true;
}

var validateSelect2Single = function (id, classParent) {
    $('#' + id).parents('.' + classParent).find('span').find('.select2-selection').removeClass('input-invalid');
    $('#' + id).parents('.' + classParent).find('span').find('.select2-container .select2-selection--single').css('border-color', '#f6f7fb');

    if ($('#' + id).val() === '') {
        $('#' + id).parents('.' + classParent).find('span').find('.select2-container .select2-selection--single').css('border-color', '');
        $('#' + id).parents('.' + classParent).find('span').find('.select2-selection').addClass('input-invalid');
        return false;
    }
    return true;
}

var closeDangerAlert = function () {
    $(".close-danger-alert").on('click', function () {
        $(this).closest(".div-alert-danger").hide()
    });
}

var showLoading = function () {
    $("#loading").show();
    $("#parent-content").addClass("disable-content");
}

var hideLoading = function () {
    $("#loading").hide();
    $("#parent-content").removeClass("disable-content");
}

var toastMessage = function (code, text) {
    var header, bgColor, icon, textColor;

    switch (code) {
        case 'success':
            header = 'Success';
            bgColor = '#3c763d';
            icon = 'success';
            textColor = '#f1f1f1';
            break;
        case 'error':
            header = 'Error';
            bgColor = '#F73F52';
            icon = 'error';
            textColor = '#f1f1f1';
            break;
        case 'warning':
            header = 'warning';
            bgColor = '#fcf8e3';
            icon = 'warning';
            textColor = '#8a6d3b';
            break;
        case 'info':
            header = 'Infomation';
            bgColor = '#d9edf7';
            icon = 'info';
            textColor = '#31708f';
            break;
    }

    $.toast({
        text: `${text}`,
        position: 'top-center',
        heading: `${header}`,
        bgColor: `${bgColor}`,
        icon: `${icon}`,
        textColor: `${textColor}`,
        hideAfter: 6000,
        beforeShow: function () {
            $(".jq-toast-wrap").css({
                "top": "100px",
                "width": "350px"
            });
        }
    });
}

var notifyMessage = function (code, text) {
    var header, faIcon = '';

    switch (code) {
        case 'success':
            header = 'Thành Công!';
            //faIcon = 'fa fa-check'
            break;
        case 'error':
            header = 'Lỗi!';
            code = 'danger';
            //faIcon = 'fa fa-exclamation-triangle'
            break;
        case 'warning':
            header = 'Cảnh Báo!';
            //faIcon = 'fa fa-exclamation-triangle'
            break;
        case 'info':
            header = 'Thông Tin!';
            //faIcon = 'fa fa-info-circle'
            break;
    }

    $.notify({
        icon: faIcon,
        title: header,
        message: text,
    }, {
        element: "body",
        position: null,
        type: code,
        allow_dismiss: true,
        newest_on_top: false,
        placement: {
            from: "top",
            align: "center",
        },
        offset: 100,
        spacing: 10,
        z_index: 1031,
        delay: 5000,
        animate: {
            enter: "animated fadeInDown",
            exit: "animated fadeOutUp",
        },
        icon_type: "class",
    });
}

var onchangeCheckbox = function () {
    if ($('input[name="ItemId"]:checked').length > 0) {
        $(".btn-base-action").prop("disabled", false);
    } else {
        $(".btn-base-action").prop("disabled", true);
    }
}

var onHideDivModal = function () {
    $(".modal-class").hide();
}

var onShowDivModal = function () {
    $(".modal-class").show();
}

var onDisableActionButton = function () {
    $(".btn-base-action").prop("disabled", true);
}

var getUrlParam = function (name) {
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);

    if (results == null) {
        return null;
    }
    return decodeURI(results[1]) || 0;
};

var getParamFromUrl = function (name, url) {
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(url);

    if (results == null) {
        return null;
    }
    return decodeURI(results[1]) || 0;
};

var getTimeZone = function () {
    var offset = new Date().getTimezoneOffset(),
        o = Math.abs(offset);
    return (offset < 0 ? "+" : "-") + ("00" + Math.floor(o / 60)).slice(-2) + ":" + ("00" + o % 60).slice(-2);
};

var isFile = function (id, listType) {
    try {
        var fileVal = id.value;
        if (fileVal.length > 0) {
            var blnValid = false;
            for (var j = 0; j < listType.length; j++) {
                var sCurExtension = listType[j];
                if (fileVal.substr(fileVal.length - sCurExtension.length, sCurExtension.length).toLowerCase() === sCurExtension.toLowerCase()) {
                    blnValid = true;
                    break;
                }
            }
            if (!blnValid) {
                return false;
            }
        }
    } catch (e) {

    }
}

var previewImage = function (inputId, imgId) {
    try {
        if (inputId.files && inputId.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#' + imgId).attr('src', e.target.result);
            }
            reader.readAsDataURL(inputId.files[0]);
        }
    } catch (e) {

    }
}

var convertImageToBase64 = function (inputId) {
    try {
        var base64String = "";
        var file = $("#" + inputId).files[0];

        var reader = new FileReader();

        reader.onload = function () {
            base64String = reader.result.replace("data:", "").replace(/^.+,/, "");
        }
        reader.readAsDataURL(file);

        return base64String;
    } catch (e) {

    }
}

var base64ToImage = function (imgId, base64) {
    try {
        $("#" + imgId).attr("src", "data:image/png;base64, " + base64);
    } catch (e) {

    }
}

var bidingImageFormAnotherImage = function (currentInput, inputBiding) {
    try {
        var src = $(currentInput).attr('src');
        $(inputBiding).prop('src', src);
    } catch (e) {

    }
}

var momentJsFromNow = function (strUtcDatetime) {
    return moment.utc(strUtcDatetime).local().fromNow();
}

var momentJsGetDateOnly = function (strUtcDatetime) {
    return moment.utc(strUtcDatetime).local().format("DD MMM YYYY");
}

var momentJsGetAllInfo = function (strUtcDatetime) {
    return momentJsGetDateOnly(strUtcDatetime) + ' (' + momentJsFromNow(strUtcDatetime) + ')';
}

var onClickLink = function (isNewTab, href) {
    if (isNewTab){
        if (window.top === window.self){
            window.open(href, "_blank");
        }else{
            window.location.href = href
        }
    }
    else{
        window.location.href = href
    }
}

var checkEmptyInput = function (object) {
    var check = true;
    for (const [key, value] of Object.entries(object)) {
        if (value === '' || value === null) {
            $("#" + key).addClass('input-invalid');
            check = false;
        } else {
            $("#" + key).removeClass('input-invalid');
        }
    }
    return check;
}

var checkInputRegex = function (listInputIdAndRegex) {
    var check = true;
    listInputIdAndRegex.forEach(e => {
        var input = $("#" + e.Id).val();
        if (!e.Regex.test(input)) {
            $("#" + e.Id).addClass('input-invalid');
            $("#msg-" + e.Id).show();
            var msg = $("#msg-" + e.Id).attr('data-id');
            $("#imsg-" + e.Id).text(msg + ' không hợp lệ');
            $("#" + e.Id).blur();
            $("#" + e.Id).focus();

            check = false;
        }
    });

    return check;
}

var removeValidationInput = function (object) {
    for (const [key, value] of Object.entries(object)) {
        $("#" + key).removeClass('input-invalid');
    }
}

var toSingleJsonObject = function (listKey, listInputId) {
    var object = listKey.reduce((acc, key, index) => ({
        ...acc, [key]: $("#" + listInputId[index]).val()
    }), {})

    return object;
}

var toSingleJsonObjectNoneInputId = function (listKey, listValues) {
    var object = listKey.reduce((acc, key, index) => ({
        ...acc, [key]: listValues[index]
    }), {})

    return object;
}

var toArrayJsoObject = function () {
    const arr = ['', 'Hi', 'Guys', 'Please', 'Share', 'The', 'Tutorial', '']

    const arrToObjects = arr.map((item, idx) => {
        return {[idx]: item}
    })
}

var handleEnter = function (callback) {
    $(document).on('keypress', function (e) {
        e.preventDefault();
        if (e.which == 13) {
            callback();
        }
    });
}

var showOrHidePassword = function () {
    $(".on-hidden-pass-confirm").on('click', function () {
        $(".on-hidden-pass-confirm").hide();
        $(".on-show-pass-confirm").show();
        $(this).parent().find('input').prop("type", "password");
    })

    $(".on-show-pass-confirm").on('click', function () {
        $(".on-show-pass-confirm").hide();
        $(".on-hidden-pass-confirm").show();
        $(this).parent().find('input').prop("type", "text");
    })

    $(".on-hidden-pass").on('click', function () {
        $(".on-hidden-pass").hide();
        $(".on-show-pass").show();
        $(this).parent().find('input').prop("type", "password");
    })

    $(".on-show-pass").on('click', function () {
        $(".on-show-pass").hide();
        $(".on-hidden-pass").show();
        $(this).parent().find('input').prop("type", "text");
    })
}

var removeUrlParam = function (parameter) {
    var url = window.location.href;
    var urlparts = url.split('?');

    if (urlparts.length >= 2) {
        var urlBase = urlparts.shift();
        var queryString = urlparts.join("?");
        var prefix = encodeURIComponent(parameter) + '=';
        var pars = queryString.split(/[&;]/g);
        for (var i = pars.length; i-- > 0;)
            if (pars[i].lastIndexOf(prefix, 0) !== -1)
                pars.splice(i, 1);
        url = urlBase + '?' + pars.join('&');
        window.history.pushState('', document.title, url);
    }
}

var sweetAlertMessage = function (success, msg, redirectUrl) {
    var icon = success ? 'success' : 'error';
    var title = success ? 'Success' : 'Error';

    if (redirectUrl !== null) {
        Swal.fire(
            title,
            `<p class="custom-font">${msg}</p>`,
            icon
        ).then((result) => {
            window.location.href = redirectUrl;
        })
    } else {
        Swal.fire(
            title,
            `<p class="custom-font">${msg}</p>`,
            icon
        )
    }
}

var logout = function () {
    localStorage.removeItem('token');
    localStorage.removeItem('search_text');

    coreAjaxWeb(true, '/Authenticate/Logout', null, 'POST', function (res) {
        notifyMessage('success', `Đăng xuất thành công`);
        window.location.reload();
    }, function () {
    });
}

var likePost = function (postId, element) {
    var title = $('#' + element).attr('data-title');
    var isLike = $('#' + element).attr('data-liked');
    var message = isLike === 'false' ? 'You liked ' : 'You unliked ';
    var data = {
        postId: postId
    };

    if (isLike === 'true') {
        $('#' + element).attr('data-liked', 'false');
        $('#' + element).removeClass('is-favorite');
    } else {
        $('#' + element).attr('data-liked', 'true');
        $('#' + element).addClass('is-favorite');
    }

    coreAjax(true, '/PostLike/Update', JSON.stringify(data), 'PUT', function (res) {
        notifyMessage('success', `${message} \"${title}\"`);
    }, function () {
        $('#' + element).removeClass('is-favorite');
    });
};

var bookmarkPost = function (postId, element) {
    var title = $('#' + element).attr('data-title');
    var isBookmarked = $('#' + element).attr('data-bookmarked');
    var message = isBookmarked === 'false' ? 'You bookmarked ' : 'You unmarked ';
    var data = {
        postId: postId
    };

    if (isBookmarked === 'true') {
        $('#' + element).attr('data-bookmarked', 'false');
        $('#' + element).removeClass('is-bookmark');
    } else {
        $('#' + element).attr('data-bookmarked', 'true');
        $('#' + element).addClass('is-bookmark');
    }

    coreAjax(true, '/Bookmark/Update', JSON.stringify(data), 'PUT', function (res) {
        notifyMessage('success', `${message} \"${title}\"`);
    }, function () {
        $('#' + element).removeClass('is-bookmark');
    });
};

var initMomentDateTime = function () {
    $(".date-with-diff-date").each(function () {
        var date = $(this).attr('data-id');
        var dateOnly = momentJsGetDateOnly(date);
        var fromNow = '(' + momentJsFromNow(date) + ')';
        $(this).text(dateOnly + ' ' + fromNow);
    });
    $(".diff-date").each(function () {
        var date = $(this).attr('data-id');
        var moment = momentJsFromNow(date);
        $(this).text(moment);
    });
    $(".date-only").each(function () {
        var date = $(this).attr('data-id');
        var dateOnly = momentJsGetDateOnly(date);
        $(this).text(dateOnly);
    });
    $(".diff-date-read-recently").each(function () {
        var date = $(this).attr('data-id');
        var moment = momentJsFromNow(date);
        $(this).text('Đã đọc: ' + moment);
    });
}

var momentDateWithDiffDate = function (date) {
    var dateOnly = momentJsGetDateOnly(date);
    var fromNow = '(' + momentJsFromNow(date) + ')';
    return dateOnly + ' ' + fromNow;
}

var initCategories = function () {
    $(".category").each(function () {
        var categories = $(this).attr('data-id');
        var arr = categories.split(',');

        arr.forEach(e => {

        })
        $(this).text(dateOnly + ' ' + fromNow);
    });
}

var scrollToView = function (divId) {
    $('html, body').animate({
        scrollTop: $("#" + divId).offset().top
    }, 1000);
}

var checkLogin = function () {
    coreAjaxWeb(true, '/Common/CheckLogin', null, 'POST', function (res) {
        $("#IsLogin").val(res);
    }, function () {
    });
}

var requestNewCookie = function () {
    coreAjaxWeb(true, `/Common/RequestNewCookies`, null, 'POST', function (res) {
    }, function () {
    });
}

var deleteCookie = function () {
    coreAjaxWeb(true, `/Common/RequestNewCookies`, null, 'POST', function (res) {
    }, function () {
    });
}

var checkLoginDownload = function () {
    coreAjaxWeb(true, '/Common/CheckLogin', null, 'POST', function (res) {
        if (!res) {
            notifyMessage('error', 'Bạn chưa đăng nhập. Chúng tôi sẽ chuyển hướng trang sang trang đăng nhập trong vài giây tới.');
            setTimeout(function () {
                window.location.href = '/sign-in#' + (location.pathname + location.search).substr(1);
            }, 3000);
        }
    }, function () {
    });
}

var sweetAlertDeleteConfirmation = function (url, id, callBack) {
    Swal.fire({
        title: '<p class="custom-font">Bạn có chắc muốn xóa?</p>',
        text: 'Sau khi xóa bạn sẽ không thể hoàn tác!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Có',
        cancelButtonText: 'Không'
    }).then((result) => {
        if (result.isConfirmed) {
            coreAjax(true, `${url}/${id}`, null, 'DELETE', function (res) {
                notifyMessage('success', 'Xóa thành công');
                callBack();
            }, function () {
            });
        }
    })
}

var sweetAlertConfirmationAction = function (url, id, titleConfirm, callBack) {
    Swal.fire({
        title: '<h3 class="custom-font">' + titleConfirm + '</h3>',
        // text: 'Sau khi xóa bạn sẽ không thể hoàn tác!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Có',
        cancelButtonText: 'Không'
    }).then((result) => {
        if (result.isConfirmed) {
            coreAjax(true, `${url}/${id}`, null, 'DELETE', function (res) {
                notifyMessage('success', 'Xóa thành công');
                callBack();
            }, function () {
            });
        }
    })
}

var handleSelectImageByIdWithCallback = function (id, callback) {
    $('#' + id).bind('change', function () {
        try {
            var fileSize = this.files[0].size !== undefined ? this.files[0].size : 0;
            var maxSize = 15 * 1048576; // 15MB
            var imgTypes = [".jpg", ".jpeg", ".png", ".gif", ".webp"];
            var str = imgTypes.join(', ');

            if (fileSize > 0) {
                if (fileSize > maxSize || isFile(this, imgTypes) === false) {
                    notifyMessage('error', `Vui lòng chọn ảnh có size nhỏ hơn 15MB`);
                    $(this).val('');
                } else {
                    callback();
                }
            }
        } catch (err) {
        }
    });
}

var handleSelectZipFileByIdWithCallback = function (id, callback) {
    $('#' + id).bind('change', function () {
        try {
            var fileSize = this.files[0].size !== undefined ? this.files[0].size : 0;
            var maxSize = 100 * 1048576; // 100MB
            var zipTypes = [".zip", ".rar"];
            var str = zipTypes.join(', ');
            if (fileSize > 0) {
                if (fileSize > maxSize || isFile(this, zipTypes) === false) {
                    notifyMessage('error', `Vui lòng chọn ảnh có size nhỏ hơn 100MB`);
                    $(this).val('');
                } else {
                    callback();
                }
            }
        } catch (err) {
        }
    });
}

var handleSelectImageById = function (id) {
    $('#' + id).bind('change', function () {
        try {
            var fileSize = this.files[0].size !== undefined ? this.files[0].size : 0;
            var maxSize = 15 * 1048576; // 15MB
            var imgTypes = [".jpg", ".jpeg", ".png", ".gif", ".webp"];
            var str = imgTypes.join(', ');

            if (fileSize > 0) {
                if (fileSize > maxSize || isFile(this, imgTypes) === false) {
                    notifyMessage('error', `Vui lòng chọn ảnh có size nhỏ hơn 15MB`);
                    $(this).val('');
                }
            }
        } catch (err) {
        }
    });
}

var handleSelectZipFileById = function (id) {
    $('#' + id).bind('change', function () {
        try {
            var fileSize = this.files[0].size !== undefined ? this.files[0].size : 0;
            var maxSize = 100 * 1048576; // 100MB
            var zipTypes = [".zip", ".rar"];
            var str = zipTypes.join(', ');
            if (fileSize > 0) {
                if (fileSize > maxSize || isFile(this, zipTypes) === false) {
                    notifyMessage('error', `Vui lòng chọn ảnh có size nhỏ hơn 100MB`);
                    $(this).val('');
                }
            }
        } catch (err) {
        }
    });
}

var handleSelectImageByClass = function (className) {
    $('.' + className).bind('change', function () {
        try {
            var fileSize = this.files[0].size !== undefined ? this.files[0].size : 0;
            var maxSize = 15 * 1048576; // 15MB
            var imgTypes = [".jpg", ".jpeg", ".png", ".gif", ".webp"];
            var str = imgTypes.join(', ');

            if (fileSize > 0) {
                if (fileSize > maxSize || isFile(this, imgTypes) === false) {
                    notifyMessage('error', `Vui lòng chọn ảnh có size nhỏ hơn 15MG`);
                    $(this).val('');
                }
            }
        } catch (err) {
        }
    });
}

var handleSelectZipFileByClass = function (className) {
    $('.' + className).bind('change', function () {
        try {
            var fileSize = this.files[0].size !== undefined ? this.files[0].size : 0;
            var maxSize = 100 * 1048576; // 100MB
            var zipTypes = [".zip", ".rar"];
            var str = zipTypes.join(', ');
            if (fileSize > 0) {
                if (fileSize > maxSize || isFile(this, zipTypes) === false) {
                    notifyMessage('error', `Vui lòng chọn ảnh có size nhỏ hơn 100MB`);
                    $(this).val('');
                }
            }
        } catch (err) {
        }
    });
}

var showOrHideElReply = function (id) {
    if (localStorage.getItem('token') === null) {
        notifyMessage('error', 'Bạn chưa đăng nhập. Chúng tôi sẽ chuyển hướng trang sang trang đăng nhập trong vài giây tới.');
        setTimeout(function () {
            window.location.href = '/sign-in#' + (location.pathname + location.search).substr(1);
        }, 3000);
    } else {
        var idReply = id;

        $('#btn-reply-open-' + idReply).hide();
        $('#li-reply-cancel-comment-' + idReply).show();
        $('#cancel-reply-to-comment-' + idReply).show();
        $('#textarea-reply-' + idReply).show();
    }
}

var showOrHideChildComment = function (isShow, parentId) {
    if (isShow) {
        $('#div-child-' + parentId).show();
        $('#btn-show-child-comment-' + parentId).show();
        $('#btn-hide-child-comment-' + parentId).hide();
    } else {
        $('#div-child-' + parentId).hide();
        $('#btn-show-child-comment-' + parentId).hide();
        $('#btn-hide-child-comment-' + parentId).show();
    }
}


var getDownloadLink = function (id) {
    var data = {
        Id: id
    };

    coreAjax(true, '/Download/GetDownloadLink', data, 'GET', function (res) {
        var openUrl = res.result.downloadUrl;

        window.open(
            openUrl,
            '_blank'
        );
    }, function () {
    });
}

var getDataCkEditor = function (id) {
    return CKEDITOR.instances[id].getData();
}

var checkEmptyCKEditor = function (id) {
    if (getDataCkEditor(id) === '') {
        $('#cke_' + id).addClass('ckeditor-border-danger');
        return false;
    } else {
        $('#cke_' + id).removeClass('ckeditor-border-danger');
        return true;
    }
}

var initCkEditor = function (id) {
    CKEDITOR.replace(id, {
        extraPlugins: 'codesnippet'
    });
}

var multiSelectDropdown = function (id, placeholder, data, listAutoSelectItem) {
    setTimeout(function () {
        $("#" + id).select2({
            placeholder: placeholder,
            data: data,
            allowClear: true
        });
    }, 200);

    if (listAutoSelectItem !== null) {
        setTimeout(function () {
            $('#' + id).val(listAutoSelectItem).trigger('change')
        }, 200);
    }
}

var singleSelectDropdown = function (id, placeholder, data, selectItem) {
    setTimeout(function () {
        $("#" + id).select2({
            placeholder: placeholder,
            data: data,
            allowClear: true
        });
    }, 200);

    if (selectItem !== null) {
        setTimeout(function () {
            $('#' + id).val(selectItem).trigger('change')
        }, 200);
    }
}

var multiSelectDropdownModal = function (modalId, id, placeholder, data, listAutoSelectItem) {
    setTimeout(function () {
        $("#" + id).select2({
            placeholder: placeholder,
            data: data,
            allowClear: true,
            dropdownParent: $('#' + modalId)
        });
    }, 200);

    if (listAutoSelectItem !== null) {
        setTimeout(function () {
            $('#' + id).val(listAutoSelectItem).trigger('change')
        }, 200);
    }
}

var singleSelectDropdownModal = function (modalId, id, placeholder, data, selectItem) {
    setTimeout(function () {
        $("#" + id).select2({
            placeholder: placeholder,
            data: data,
            allowClear: true,
            dropdownParent: $('#' + modalId)
        });
    }, 200);

    if (selectItem !== null) {
        setTimeout(function () {
            $('#' + id).val(selectItem).trigger('change')
        }, 200);
    }
}

var truncateString = function (input, len) {
    var strLen = input.length;

    if (len === strLen) return input;
    else if (strLen > len) return input.substring(0, len) + '...';
    else return input;
}

let postReadRecently = function () {
    let intervalRead = setInterval(function () {
        if ($('#list-read-recently').length > 0) {
            let html = '';
            let data = JSON.parse(localStorage.getItem('read_recently'));

            if (data) {
                if (data.length > 0) {

                    for (let i = 0; i < data.length; i++) {
                        if (i === 4) break;
                        let dateTime = momentJsFromNow(data[i].dateRead);
                        html += `
                            <li class="mb-30">
                            <div class="d-flex hover-up-2 transition-normal">
                                <div class="post-thumb post-thumb-80 d-flex mr-15 border-radius-5 img-hover-scale overflow-hidden code-mega-border">
                                    <a class="color-white" href="${data[i].postUrl}">
                                        <img src="${data[i].metaImage}" alt="">
                                    </a>
                                </div>
                                <div class="post-content media-body">
                                    <h6 class="post-title mb-15 text-limit-2-row font-medium"><a href="${data[i].postUrl}">${data[i].title}</a></h6>
                                    <div class="entry-meta meta-1 float-left font-x-small text-uppercase">
                                        <span class="post-on custom-font">Đã đọc ${dateTime}</span>
<!--                                        <span class="post-by has-dot">300 views</span>-->
                                    </div>
                                </div>
                            </div>
                        </li>
                        `;
                    }

                    $('#list-read-recently').html(html);
                    initMomentDateTime();
                } else {
                    $('#list-read-recently').hide();
                    $('#empty-read-recently').show();
                }
            } else {
                $('#list-read-recently').hide();
                $('#empty-read-recently').show();
            }
            clearInterval(intervalRead);
        }
    }, 300);
}

let updateWithPartial = function (url, modalBody, modelId) {
    coreAjaxGetPartialView(true, url, null, function (response) {
        $("#" + modalBody).html(response);
        $('#' + modelId).modal('show');
    }, function () {
    });
}

var isEmptyOrWhiteSpace = function (str) {
    return str.trim().length === 0;
}

var copyText = function (inputId) {
    var copyText = document.getElementById(inputId);
    copyText.select();
    copyText.setSelectionRange(0, 99999);
    navigator.clipboard.writeText(copyText.value);
    notifyMessage('success', 'Copied thành công');
}

var createDownloadToken = function (sourceCodeId) {
    var data = {
        SourceCodeId: sourceCodeId
    }
    coreAjax(checkEmptyInput(data), '/TokenSourceCode/Create', JSON.stringify(data), 'POST', function (res) {
        notifyMessage('success', 'Lưu thành công');
        var tokenSourceCodeId = res.result.response;
        setTimeout(function () {
            coreAjaxGetPartialView(true, '/SourceCode/SendMailDownloadToken?id=' + tokenSourceCodeId, null, function (response) {
                $("#modal-send-token-content").html(response);
                $('#modal-send-mail-after-created-token').modal('show');
            }, function () {
            });
        }, 300);
    }, function () {
    });
}

let renderChart = function (divParent, divChild, type, dataPoints, suffixText, backgroundColor, titleChart, axisYTitle, axisXTitle) {
    let options = {
        title: {
            text: titleChart
        },
        exportEnabled: true,
        backgroundColor: backgroundColor,
        animationEnabled: true,
        interactivityEnabled: true,
        axisY: {
            title: axisYTitle,
            uffix: " " + suffixText
        },
        axisX: {
            title: axisXTitle
        },
        data: [
            {
                type: type, // Change type to doughnut, line, splineArea, etc, column, area, bar, pie, etc
                indexLabel: "{y} " + suffixText,
                toolTipContent: "<b>{label}</b>: {y} " + suffixText,
                dataPoints: dataPoints
            }
        ]
    };

    $("#" + divParent).resizable({
        create: function (event, ui) {
            //Create chart.
            $("#" + divChild).CanvasJSChart(options);
        },
        resize: function (event, ui) {
            //Update chart size according to its container size.
            $("#" + divChild).CanvasJSChart().render();
        }
    });
}

var isNullOrEmpty = function (input) {
    return input === '' || input === null || input === undefined;
}

var formatCurrencyVND = function (amount) {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + ' đ';
}

var formatNumber = function (amount) {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
}

var getLocalStorage = function (key) {
    var text = localStorage.getItem(key);
    if (text) {
        return text;
    } else {
        return '';
    }
}

var setLocalStorage = function (key, value) {
    localStorage.setItem(key, value)
}

let isNullOrEmptyWithReturn = function (input){
    if (isNullOrEmpty(input)){
        return '';
    }
    return input;
}

let equalsIgnoreCase = function (param1, param2){
    if (param1 && param2){
        if (param1.toString().toLowerCase() === param2.toString().toLowerCase()){
            return true;
        }
        return false;
    }
    return false;
}

let containsIgnoreCase = function (param1, param2){
    if (param1 && param2){
        let list = param2.toLowerCase().split(';');

        if (list.includes(param1)){
            return true;
        }
        return false;
    }
    return false;
}